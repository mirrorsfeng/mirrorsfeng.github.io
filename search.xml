<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习git笔记</title>
    <url>/2021/02/08/%E5%AD%A6%E4%B9%A0git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="学习git笔记"><a href="#学习git笔记" class="headerlink" title="学习git笔记"></a>学习git笔记</h1><ul>
<li>主要一个核心概念就是版本控制</li>
<li>目前版本控制可以分为 本地版本控制系统，集中化版本控制系统，分布式版本控制系统</li>
</ul>
<p>而git就是目前最先进的分布式版本控制系统，每个客户端都可以对代码仓库进行克隆，保存一份完整的代码，这样就不用担心服务器发生故障，当然这对于安全权限是有坏处的。</p>
<ul>
<li><p>基本git操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init 仓库初始化</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add . 将所有文件加入到暂存区</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;注释&quot; 将暂存区的文件提交到仓库里面</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status 可以查看版本状态</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &lt;url&gt; 克隆仓库</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch 查看分支</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch name 创建分支</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout name 切换分支</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge name 合并分支</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d name 删除分支</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset -hard HEAD 撤销工作目录中所有未提交文件的修改</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push 推到远程仓库 &#x2F;&#x2F; git push -u origin master</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>BFC</title>
    <url>/2021/02/08/BFC/</url>
    <content><![CDATA[<h1 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h1><h2 id="FC"><a href="#FC" class="headerlink" title="FC"></a>FC</h2><p>FC的全称是：Formatting Contexts，是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用</p>
<h2 id="BFC-1"><a href="#BFC-1" class="headerlink" title="BFC"></a>BFC</h2><p>Block Formatting Context 叫做块级格式化上下文，它有相应的布局规则：</p>
<ul>
<li>内部的盒子会在垂直方向排列放置</li>
<li>盒子垂直方向的距离由margin值决定，属于同一个BFC的相邻两个box上下margin会发生重叠</li>
<li>每个元素左边，与包含的盒子的左边相接触，即使浮动也是</li>
<li>BFC区域不会与float重叠</li>
<li>BFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面，反之亦然</li>
<li>计算BFC高度时，浮动元素也参与计算</li>
</ul>
<h3 id="产生BFC"><a href="#产生BFC" class="headerlink" title="产生BFC"></a>产生BFC</h3><p>1.根元素</p>
<p>2.float不为none时</p>
<p>3.display为 inline-block，table-cell，table-caption，flex</p>
<p>4.overflow不为visible时</p>
<p>5.position为absolute或者fixed</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2021/02/06/ES6/</url>
    <content><![CDATA[<h2 id="es6语法新特性"><a href="#es6语法新特性" class="headerlink" title="es6语法新特性"></a>es6语法新特性</h2><p>es6语法新特性给编程带来了很大的遍历，尽管存在兼容性问题，但是也可以通过babel进行转化</p>
<h4 id="1-let以及const"><a href="#1-let以及const" class="headerlink" title="1.let以及const"></a>1.let以及const</h4><p>let和const都是块级作用域，不像var会进行变量提升。通常用let来定义变量，用const定义常量</p>
<h4 id="2-模板字符串"><a href="#2-模板字符串" class="headerlink" title="2.模板字符串"></a>2.模板字符串</h4><p>用一对反引号（<code>模板字符串</code>）标识 ，它可以当普通字符串使用（’普通字符串’），也可以用来定义多行字符串 ，在模板字符串中可以嵌入变量 ，js表达式或函数等 ，变量，js表达式或函数需要写在${}中。</p>
<h4 id="3-变量的解构"><a href="#3-变量的解构" class="headerlink" title="3.变量的解构"></a>3.变量的解构</h4><p>Es6可以用解构语法方便从数组以及对象中提取属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let [name, age, sex] &#x3D; [&#39;mirrorsfeng&#39;,&#39;20&#39;,&#39;man&#39;];</span><br><span class="line"></span><br><span class="line">const user &#x3D; &#123;</span><br><span class="line"> 	name: &#39;mirrorsfeng&#39;,</span><br><span class="line"> 	age: 20,</span><br><span class="line"> 	sex: &#39;man&#39;</span><br><span class="line">&#125;</span><br><span class="line">let &#123;name,age,sex&#125; &#x3D; user</span><br></pre></td></tr></table></figure>

<h4 id="4-箭头函数"><a href="#4-箭头函数" class="headerlink" title="4.箭头函数"></a>4.箭头函数</h4><p>在es6中 ，提供了函数的简洁写法 ，我们称之为箭头函数 ，<strong>箭头函数，本质上就是一个匿名函数</strong> ，*<strong>*箭头函数的特性\</strong>：** 箭头函数内部的 this, 永远和 箭头函数外部的 this 保持一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const add &#x3D; (num1,num2) &#x3D;&gt; (num1+num2);</span><br><span class="line"></span><br><span class="line">const addOutput &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">	let p &#x3D; 2;</span><br><span class="line">	console.log(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-展开运算符"><a href="#5-展开运算符" class="headerlink" title="5.展开运算符"></a>5.展开运算符</h4><p>用处较多，最常用两个方法</p>
<ul>
<li>将字符串转成数组</li>
<li>合并数组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let str &#x3D; &#39;abcd&#39;</span><br><span class="line"></span><br><span class="line">const Arr &#x3D; [...str] &#x2F;&#x2F;可以直接转化为数组</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;更新数组（合并）</span><br><span class="line">let arr1 &#x3D; [1,2,3];</span><br><span class="line">let arr2 &#x3D; [4,5,6];</span><br><span class="line">arr1 &#x3D; [...arr1,...arr2];</span><br></pre></td></tr></table></figure>

<h4 id="6-for…of-for…in"><a href="#6-for…of-for…in" class="headerlink" title="6.for…of, for…in"></a>6.for…of, for…in</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arrs &#x3D; [&#39;p&#39;,&#39;q&#39;,&#39;r&#39;];</span><br><span class="line">for(let arr of arrs)&#123;</span><br><span class="line">	console.log(arr);  &#x2F;&#x2F; p,q,r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(let brr in arrs)&#123;</span><br><span class="line">	console.log(brr); &#x2F;&#x2F;0,1,2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-Map-and-WeakMap"><a href="#7-Map-and-WeakMap" class="headerlink" title="7.Map and WeakMap"></a>7.Map and WeakMap</h4><p>map跟Weakmap都是以键值对存储的数据结构集，跟java的hashmap有类似的地方。</p>
]]></content>
      <tags>
        <tag>js语法</tag>
      </tags>
  </entry>
  <entry>
    <title>React受控组件</title>
    <url>/2021/01/24/react%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="React受控组件"><a href="#React受控组件" class="headerlink" title="React受控组件"></a>React受控组件</h1><p>在react中受控组件一般针对于表单元素，要求对于表单元素，把其中的状态放入state中进行管理，自己用函数控制改变。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">PureComponents</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      username: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;form onSubmit=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">this</span>.handleSubmit(e)&#125;&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">            用户: </span><br><span class="line">            &#123;<span class="comment">/* 受控组件 */</span>&#125;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> </span><br><span class="line">                   id=<span class="string">&quot;username&quot;</span> </span><br><span class="line">                   onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">this</span>.handleChange(e)&#125;</span><br><span class="line">                   value=&#123;<span class="built_in">this</span>.state.username&#125;/&gt;</span><br><span class="line">          &lt;/label&gt;</span><br><span class="line">          &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleSubmit</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.username);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleChange</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      username: event.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>学习react</tag>
      </tags>
  </entry>
  <entry>
    <title>react中的css</title>
    <url>/2020/12/19/react%E4%B8%AD%E7%9A%84css/</url>
    <content><![CDATA[<h2 id="在react写css的方法有很多"><a href="#在react写css的方法有很多" class="headerlink" title="在react写css的方法有很多"></a>在react写css的方法有很多</h2><p>可以通过内联样式,外部引入普通css来达到自己的效果，也有用css modules来进行书写的。在react中，我个人比较喜欢一种方式，也可称之为css in js。顾名思义该样式文件后缀名也是.js。在react中通过第三方库引入，我通过yarn管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure>

<p>styled-components的本质是通过函数的调用，最终创建出一个组件：</p>
<ul>
<li><p>这个组件会被自动添加上一个不重复的class</p>
</li>
<li><p>styled-components会给class添加相关的样式</p>
</li>
</ul>
<p>它能在逻辑上与js有良好的沟通，对于程序员逻辑的构思我认为是有好处的。</p>
]]></content>
      <tags>
        <tag>学习react</tag>
      </tags>
  </entry>
  <entry>
    <title>react相关性能优化</title>
    <url>/2020/12/18/react%20setstate%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="react相关性能优化"><a href="#react相关性能优化" class="headerlink" title="react相关性能优化"></a>react相关性能优化</h1><ul>
<li><p>react中jsx实际通过babel转化为React.createElement()函数的形式进行代码构建。</p>
<p>而该函数可以生成一个ReactElement对象，这就是react中虚拟dom的具体原理体现</p>
</li>
<li><p>在类组件中常用state来进行一些状态的管理</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class App extends React.component &#123;</span><br><span class="line">	constructor(props)&#123;</span><br><span class="line">	super(props);</span><br><span class="line">	</span><br><span class="line">	this.state &#x3D; &#123;</span><br><span class="line">		friends: [</span><br><span class="line">		&#123;name:mirrorsfeng,age: 20&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>像以上的state的更新不要直接去修改state的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let newFriends &#x3D; this.state.friends;</span><br><span class="line">newFriends[0].age &#x3D; 21;</span><br><span class="line">setState(&#123;</span><br><span class="line">	friends: newFriends</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;错误</span><br></pre></td></tr></table></figure>

<p>这样如果对代码进行优化，那么这么修改将不会渲染到页面上，因为这个friends 的地址值其实并没有发生变化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let newFriends &#x3D; [...this.state.friends];</span><br><span class="line">newFriends[0].age &#x3D; 21;</span><br><span class="line">setState(&#123;</span><br><span class="line">  	friends: newFriends</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;正确</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>学习react</tag>
      </tags>
  </entry>
</search>
