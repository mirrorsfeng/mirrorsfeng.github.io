<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6</title>
    <url>/2021/02/06/ES6/</url>
    <content><![CDATA[<h2 id="es6语法新特性"><a href="#es6语法新特性" class="headerlink" title="es6语法新特性"></a>es6语法新特性</h2><p>es6语法新特性给编程带来了很大的遍历，尽管存在兼容性问题，但是也可以通过babel进行转化</p>
<h4 id="1-let以及const"><a href="#1-let以及const" class="headerlink" title="1.let以及const"></a>1.let以及const</h4><p>let和const都是块级作用域，不像var会进行变量提升。通常用let来定义变量，用const定义常量</p>
<h4 id="2-模板字符串"><a href="#2-模板字符串" class="headerlink" title="2.模板字符串"></a>2.模板字符串</h4><p>用一对反引号（<code>模板字符串</code>）标识 ，它可以当普通字符串使用（’普通字符串’），也可以用来定义多行字符串 ，在模板字符串中可以嵌入变量 ，js表达式或函数等 ，变量，js表达式或函数需要写在${}中。</p>
<h4 id="3-变量的解构"><a href="#3-变量的解构" class="headerlink" title="3.变量的解构"></a>3.变量的解构</h4><p>Es6可以用解构语法方便从数组以及对象中提取属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let [name, age, sex] &#x3D; [&#39;mirrorsfeng&#39;,&#39;20&#39;,&#39;man&#39;];</span><br><span class="line"></span><br><span class="line">const user &#x3D; &#123;</span><br><span class="line"> 	name: &#39;mirrorsfeng&#39;,</span><br><span class="line"> 	age: 20,</span><br><span class="line"> 	sex: &#39;man&#39;</span><br><span class="line">&#125;</span><br><span class="line">let &#123;name,age,sex&#125; &#x3D; user</span><br></pre></td></tr></table></figure>

<h4 id="4-箭头函数"><a href="#4-箭头函数" class="headerlink" title="4.箭头函数"></a>4.箭头函数</h4><p>在es6中 ，提供了函数的简洁写法 ，我们称之为箭头函数 ，<strong>箭头函数，本质上就是一个匿名函数</strong> ，*<strong>*箭头函数的特性\</strong>：** 箭头函数内部的 this, 永远和 箭头函数外部的 this 保持一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const add &#x3D; (num1,num2) &#x3D;&gt; (num1+num2);</span><br><span class="line"></span><br><span class="line">const addOutput &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">	let p &#x3D; 2;</span><br><span class="line">	console.log(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-展开运算符"><a href="#5-展开运算符" class="headerlink" title="5.展开运算符"></a>5.展开运算符</h4><p>用处较多，最常用两个方法</p>
<ul>
<li>将字符串转成数组</li>
<li>合并数组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let str &#x3D; &#39;abcd&#39;</span><br><span class="line"></span><br><span class="line">const Arr &#x3D; [...str] &#x2F;&#x2F;可以直接转化为数组</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;更新数组（合并）</span><br><span class="line">let arr1 &#x3D; [1,2,3];</span><br><span class="line">let arr2 &#x3D; [4,5,6];</span><br><span class="line">arr1 &#x3D; [...arr1,...arr2];</span><br></pre></td></tr></table></figure>

<h4 id="6-for…of-for…in"><a href="#6-for…of-for…in" class="headerlink" title="6.for…of, for…in"></a>6.for…of, for…in</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arrs &#x3D; [&#39;p&#39;,&#39;q&#39;,&#39;r&#39;];</span><br><span class="line">for(let arr of arrs)&#123;</span><br><span class="line">	console.log(arr);  &#x2F;&#x2F; p,q,r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(let brr in arrs)&#123;</span><br><span class="line">	console.log(brr); &#x2F;&#x2F;0,1,2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-Map-and-WeakMap"><a href="#7-Map-and-WeakMap" class="headerlink" title="7.Map and WeakMap"></a>7.Map and WeakMap</h4><p>map跟Weakmap都是以键值对存储的数据结构集，跟java的hashmap有类似的地方。</p>
]]></content>
      <tags>
        <tag>js语法</tag>
      </tags>
  </entry>
  <entry>
    <title>react中的css</title>
    <url>/2020/12/19/react%E4%B8%AD%E7%9A%84css/</url>
    <content><![CDATA[<h2 id="在react写css的方法有很多"><a href="#在react写css的方法有很多" class="headerlink" title="在react写css的方法有很多"></a>在react写css的方法有很多</h2><p>可以通过内联样式,外部引入普通css来达到自己的效果，也有用css modules来进行书写的。在react中，我个人比较喜欢一种方式，也可称之为css in js。顾名思义该样式文件后缀名也是.js。在react中通过第三方库引入，我通过yarn管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure>

<p>styled-components的本质是通过函数的调用，最终创建出一个组件：</p>
<ul>
<li><p>这个组件会被自动添加上一个不重复的class</p>
</li>
<li><p>styled-components会给class添加相关的样式</p>
</li>
</ul>
<p>它能在逻辑上与js有良好的沟通，对于程序员逻辑的构思我认为是有好处的。</p>
]]></content>
      <tags>
        <tag>学习react</tag>
      </tags>
  </entry>
</search>
